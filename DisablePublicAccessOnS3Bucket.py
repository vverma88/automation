# Python code for a Lambda function that is triggered by an event generated by AWS Config.
# Lambda function is invoked when AWS Config rule for s3 public access becomes non-compliant.
# Lambda function performs auto-remediation action on the s3 bucket to make it compliant.

import json
import boto3
from pprint import pprint

# sample aws-config event to trigger the Lambda function.
aws_config_trigger = {
  "version": "1.0",
  "invokingEvent": "{\"configurationItem\":{\"configurationItemCaptureTime\":\"2025-08-16T12:34:56.789Z\",\"configurationItemStatus\":\"OK\",\"configurationStateId\":1234567890,\"awsAccountId\":\"123456789012\",\"configurationItemMD5Hash\":\"abcd1234efgh5678\",\"resourceType\":\"AWS::S3::Bucket\",\"resourceId\":\"my-sample-bucket\",\"resourceName\":\"vvawstestbucket\",\"awsRegion\":\"us-east-1\",\"availabilityZone\":\"Regional\",\"configuration\":{\"name\":\"my-sample-bucket\",\"publicAccessBlockConfiguration\":{\"blockPublicAcls\":false,\"ignorePublicAcls\":false,\"blockPublicPolicy\":false,\"restrictPublicBuckets\":false}},\"supplementaryConfiguration\":{},\"tags\":{},\"relatedEvents\":[],\"relationships\":[],\"arn\":\"arn:aws:s3:::my-sample-bucket\"},\"messageType\":\"ConfigurationItemChangeNotification\"}",
  "ruleParameters": "{}",
  "resultToken": "abcde12345-fghi-6789-jklm-nopqrs7890",
  "eventLeftScope": "false",
  "executionRoleArn": "arn:aws:iam::123456789012:role/aws-config-role",
  "configRuleArn": "arn:aws:config:us-east-1:123456789012:config-rule/config-rule-abcd1234",
  "configRuleName": "s3-bucket-public-read-prohibited",
  "configRuleId": "config-rule-abcd1234",
  "accountId": "123456789012",
  "region": "us-east-1"
}

def lambda_handler(event, context):
    # Parse the Config event
    invoking_event = json.loads(event['invokingEvent'])
    configuration_item = invoking_event.get('configurationItem')

    resource_id = configuration_item.get('resourceId')
    resource_type = configuration_item.get('resourceType')
    resource_name = configuration_item.get('resourceName')

    print(f"Non-compliant resource: {resource_id} {resource_type} {resource_name}")

    if resource_type == 'AWS::S3::Bucket':
        s3_client = boto3.client('s3')
        public_access_details = s3_client.get_public_access_block(Bucket= resource_name)

        pprint(public_access_details)
        if public_access_details['PublicAccessBlockConfiguration']['BlockPublicAcls'] == False:
            public_access_details['PublicAccessBlockConfiguration']['BlockPublicAcls'] = True
        if public_access_details['PublicAccessBlockConfiguration']['BlockPublicPolicy'] == False:
            public_access_details['PublicAccessBlockConfiguration']['BlockPublicPolicy'] = True
        if public_access_details['PublicAccessBlockConfiguration']['IgnorePublicAcls'] == False:
            public_access_details['PublicAccessBlockConfiguration']['IgnorePublicAcls'] = True
        if public_access_details['PublicAccessBlockConfiguration']['RestrictPublicBuckets'] == False:
            public_access_details['PublicAccessBlockConfiguration']['RestrictPublicBuckets'] = True

    pprint(public_access_details)
    s3_client.put_public_access_block(Bucket=resource_name, PublicAccessBlockConfiguration=public_access_details['PublicAccessBlockConfiguration'])


lambda_handler(aws_config_trigger, None)